<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft fxcop 10.0\Xml\FxCopReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="H:\Programmering\Statistik\bin\Debug\Statistik.exe">
   <Modules>
    <Module Name="statistik.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Statistik.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Statistik.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'Statistik.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Statistik">
       <Types>
        <Type Name="FileHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#read()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="38">Modify 'FileHandler.read()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="read" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="19">Correct the casing of 'read' in member name 'FileHandler.read()' by changing it to 'Read'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="19">The 'this' parameter (or 'Me' in Visual Basic) of 'FileHandler.read()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="32">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileHandler.read()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="39">Change 'FileHandler.read()' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#write(Statistik.Statistics)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="write" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="53">Correct the casing of 'write' in member name 'FileHandler.write(Statistics)' by changing it to 'Write'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="53">The 'this' parameter (or 'Me' in Visual Basic) of 'FileHandler.write(Statistics)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="FileHandler.cs" Line="70">Change 'FileHandler.write(Statistics)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MainForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#createNewStat(Statistik.StatisticsItem)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="74">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MainForm.createNewStat(StatisticsItem)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#moreStatistics(System.Object,System.Windows.Forms.MouseEventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="109">'sender', a parameter, is cast to type 'Button' multiple times in method 'MainForm.moreStatistics(object, MouseEventArgs)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="111">'sender', a parameter, is cast to type 'Button' multiple times in method 'MainForm.moreStatistics(object, MouseEventArgs)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="113">'sender', a parameter, is cast to type 'Button' multiple times in method 'MainForm.moreStatistics(object, MouseEventArgs)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message Id="more" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="105">Correct the casing of 'more' in member name 'MainForm.moreStatistics(object, MouseEventArgs)' by changing it to 'More'.</Issue>
            </Message>
            <Message Id="ea" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="107">'MainForm.moreStatistics(object, MouseEventArgs)' declares a variable, 'ea', of type 'MouseEventArgs', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="114">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'MainForm.moreStatistics(object, MouseEventArgs)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#removeStat(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="remove" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="MainForm.cs" Line="123">Correct the casing of 'remove' in member name 'MainForm.removeStat(object, EventArgs)' by changing it to 'Remove'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NewItemName" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#getName()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="NewItemName.cs" Line="39">Correct the casing of 'get' in member name 'NewItemName.getName()' by changing it to 'Get'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="h:\Programmering\Statistik" File="NewItemName.cs" Line="39">Change 'NewItemName.getName()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NewItemName_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="NewItemName.cs" Line="29">Change 'NewItemName.NewItemName_FormClosing(object, FormClosingEventArgs)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Program" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Main(System.String[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="args" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="h:\Programmering\Statistik" File="Program.cs" Line="11">Parameter 'args' of 'Program.Main(string[])' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Statistics" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#addItem(Statistik.StatisticsItem)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="add" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="18">Correct the casing of 'add' in member name 'Statistics.addItem(StatisticsItem)' by changing it to 'Add'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#addItem(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="add" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="23">Correct the casing of 'add' in member name 'Statistics.addItem(string)' by changing it to 'Add'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#countAdded(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="count" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="40">Correct the casing of 'count' in member name 'Statistics.countAdded(string)' by changing it to 'Count'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#countSubtracted(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="count" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="48">Correct the casing of 'count' in member name 'Statistics.countSubtracted(string)' by changing it to 'Count'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#deleteItem(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="delete" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="28">Correct the casing of 'delete' in member name 'Statistics.deleteItem(string)' by changing it to 'Delete'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getCounts(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="66">Correct the casing of 'get' in member name 'Statistics.getCounts(string)' by changing it to 'Get'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getItemList()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="61">Change 'List&lt;StatisticsItem&gt;' in 'Statistics.getItemList()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="get" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="61">Correct the casing of 'get' in member name 'Statistics.getItemList()' by changing it to 'Get'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="61">Change 'Statistics.getItemList()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#itemExists(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="item" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="56">Correct the casing of 'item' in member name 'Statistics.itemExists(string)' by changing it to 'Item'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#numberOfItems()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="number" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-06-15 08:05:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="h:\Programmering\Statistik" File="Statistics.cs" Line="35">Correct the casing of 'number' in member name 'Statistics.numberOfItems()' by changing it to 'Number'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182191(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
